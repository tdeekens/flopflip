// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`with \`propKey\` should match snapshot 1`] = `
<ConfigureFlopflip
  adapter={
    Object {
      "configure": [Function],
      "reconfigure": [Function],
    }
  }
  adapterArgs={Object {}}
  defaultFlags={Object {}}
  shouldDeferAdapterConfiguration={false}
>
  <ConfigureAdapter
    adapter={
      Object {
        "configure": [Function],
        "reconfigure": [Function],
      }
    }
    adapterArgs={
      Object {
        "onFlagsStateChange": [Function],
        "onStatusStateChange": [Function],
      }
    }
    defaultFlags={Object {}}
    shouldDeferAdapterConfiguration={false}
  >
    <Broadcast
      channel="@flopflip"
      compareValues={[Function]}
      value={Object {}}
    >
      <Container>
        <injectFeatureToggle(FeatureComponent)>
          <Subscriber
            channel="@flopflip"
            quiet={false}
          >
            <withProps(omitProps(FeatureComponent))
              @flopflip/flags={Object {}}
            >
              <omitProps(FeatureComponent)
                @flopflip/flags={Object {}}
                fooBar={false}
              >
                <FeatureComponent
                  fooBar={false}
                >
                  <div />
                </FeatureComponent>
              </omitProps(FeatureComponent)>
            </withProps(omitProps(FeatureComponent))>
          </Subscriber>
        </injectFeatureToggle(FeatureComponent)>
      </Container>
    </Broadcast>
  </ConfigureAdapter>
</ConfigureFlopflip>
`;

exports[`without \`propKey\` when feature is disabled should match snapshot 1`] = `
<ConfigureFlopflip
  adapter={
    Object {
      "configure": [Function],
      "reconfigure": [Function],
    }
  }
  adapterArgs={Object {}}
  defaultFlags={Object {}}
  shouldDeferAdapterConfiguration={false}
>
  <ConfigureAdapter
    adapter={
      Object {
        "configure": [Function],
        "reconfigure": [Function],
      }
    }
    adapterArgs={
      Object {
        "onFlagsStateChange": [Function],
        "onStatusStateChange": [Function],
      }
    }
    defaultFlags={Object {}}
    shouldDeferAdapterConfiguration={false}
  >
    <Broadcast
      channel="@flopflip"
      compareValues={[Function]}
      value={Object {}}
    >
      <Container>
        <injectFeatureToggle(FeatureComponent)>
          <Subscriber
            channel="@flopflip"
            quiet={false}
          >
            <withProps(omitProps(FeatureComponent))
              @flopflip/flags={Object {}}
            >
              <omitProps(FeatureComponent)
                @flopflip/flags={Object {}}
                isFeatureEnabled={false}
              >
                <FeatureComponent
                  isFeatureEnabled={false}
                >
                  <div />
                </FeatureComponent>
              </omitProps(FeatureComponent)>
            </withProps(omitProps(FeatureComponent))>
          </Subscriber>
        </injectFeatureToggle(FeatureComponent)>
      </Container>
    </Broadcast>
  </ConfigureAdapter>
</ConfigureFlopflip>
`;

exports[`without \`propKey\` when feature is disabled when enabling feature should match snapshot 1`] = `
<ConfigureFlopflip
  adapter={
    Object {
      "configure": [Function],
      "reconfigure": [Function],
    }
  }
  adapterArgs={Object {}}
  defaultFlags={Object {}}
  shouldDeferAdapterConfiguration={false}
>
  <ConfigureAdapter
    adapter={
      Object {
        "configure": [Function],
        "reconfigure": [Function],
      }
    }
    adapterArgs={
      Object {
        "onFlagsStateChange": [Function],
        "onStatusStateChange": [Function],
      }
    }
    defaultFlags={Object {}}
    shouldDeferAdapterConfiguration={false}
  >
    <Broadcast
      channel="@flopflip"
      compareValues={[Function]}
      value={
        Object {
          "flag1": true,
        }
      }
    >
      <Container>
        <injectFeatureToggle(FeatureComponent)>
          <Subscriber
            channel="@flopflip"
            quiet={false}
          >
            <withProps(omitProps(FeatureComponent))
              @flopflip/flags={
                Object {
                  "flag1": true,
                }
              }
            >
              <omitProps(FeatureComponent)
                @flopflip/flags={
                  Object {
                    "flag1": true,
                  }
                }
                isFeatureEnabled={true}
              >
                <FeatureComponent
                  isFeatureEnabled={true}
                >
                  <div />
                </FeatureComponent>
              </omitProps(FeatureComponent)>
            </withProps(omitProps(FeatureComponent))>
          </Subscriber>
        </injectFeatureToggle(FeatureComponent)>
      </Container>
    </Broadcast>
  </ConfigureAdapter>
</ConfigureFlopflip>
`;
