// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`with \`untoggledComponent when feature is disabled should match snapshot 1`] = `
<ConfigureFlopflip
  adapter={
    Object {
      "configure": [Function],
      "getFlag": [Function],
      "getIsReady": [Function],
      "reconfigure": [Function],
      "reset": [Function],
      "waitUntilConfigured": [Function],
    }
  }
  adapterArgs={Object {}}
  defaultFlags={Object {}}
  shouldDeferAdapterConfiguration={false}
>
  <ConfigureAdapter
    adapter={
      Object {
        "configure": [Function],
        "getFlag": [Function],
        "getIsReady": [Function],
        "reconfigure": [Function],
        "reset": [Function],
        "waitUntilConfigured": [Function],
      }
    }
    adapterArgs={
      Object {
        "onFlagsStateChange": [Function],
        "onStatusStateChange": [Function],
      }
    }
    defaultFlags={Object {}}
    render={null}
    shouldDeferAdapterConfiguration={false}
  >
    <branchOnFeatureToggle(ToggledComponent)>
      <withProps(omitProps(BranchOnFeatureToggle))
        @flopflip/flags={Object {}}
      >
        <omitProps(BranchOnFeatureToggle)
          @flopflip/flags={Object {}}
          isFeatureEnabled={false}
        >
          <BranchOnFeatureToggle
            isFeatureEnabled={false}
          >
            <UntoggledComponent>
              <div />
            </UntoggledComponent>
          </BranchOnFeatureToggle>
        </omitProps(BranchOnFeatureToggle)>
      </withProps(omitProps(BranchOnFeatureToggle))>
    </branchOnFeatureToggle(ToggledComponent)>
  </ConfigureAdapter>
</ConfigureFlopflip>
`;

exports[`with \`untoggledComponent when feature is disabled when enabling feature should match snapshot 1`] = `
<ConfigureFlopflip
  adapter={
    Object {
      "configure": [Function],
      "getFlag": [Function],
      "getIsReady": [Function],
      "reconfigure": [Function],
      "reset": [Function],
      "waitUntilConfigured": [Function],
    }
  }
  adapterArgs={Object {}}
  defaultFlags={Object {}}
  shouldDeferAdapterConfiguration={false}
>
  <ConfigureAdapter
    adapter={
      Object {
        "configure": [Function],
        "getFlag": [Function],
        "getIsReady": [Function],
        "reconfigure": [Function],
        "reset": [Function],
        "waitUntilConfigured": [Function],
      }
    }
    adapterArgs={
      Object {
        "onFlagsStateChange": [Function],
        "onStatusStateChange": [Function],
      }
    }
    defaultFlags={Object {}}
    render={null}
    shouldDeferAdapterConfiguration={false}
  >
    <branchOnFeatureToggle(ToggledComponent)>
      <withProps(omitProps(BranchOnFeatureToggle))
        @flopflip/flags={
          Object {
            "flag1": true,
          }
        }
      >
        <omitProps(BranchOnFeatureToggle)
          @flopflip/flags={
            Object {
              "flag1": true,
            }
          }
          isFeatureEnabled={true}
        >
          <BranchOnFeatureToggle
            isFeatureEnabled={true}
          >
            <ToggledComponent>
              <div />
            </ToggledComponent>
          </BranchOnFeatureToggle>
        </omitProps(BranchOnFeatureToggle)>
      </withProps(omitProps(BranchOnFeatureToggle))>
    </branchOnFeatureToggle(ToggledComponent)>
  </ConfigureAdapter>
</ConfigureFlopflip>
`;

exports[`without \`untoggledComponent when feature is disabled should match snapshot 1`] = `
<ConfigureFlopflip
  adapter={
    Object {
      "configure": [Function],
      "getFlag": [Function],
      "getIsReady": [Function],
      "reconfigure": [Function],
      "reset": [Function],
      "waitUntilConfigured": [Function],
    }
  }
  adapterArgs={Object {}}
  defaultFlags={Object {}}
  shouldDeferAdapterConfiguration={false}
>
  <ConfigureAdapter
    adapter={
      Object {
        "configure": [Function],
        "getFlag": [Function],
        "getIsReady": [Function],
        "reconfigure": [Function],
        "reset": [Function],
        "waitUntilConfigured": [Function],
      }
    }
    adapterArgs={
      Object {
        "onFlagsStateChange": [Function],
        "onStatusStateChange": [Function],
      }
    }
    defaultFlags={Object {}}
    render={null}
    shouldDeferAdapterConfiguration={false}
  >
    <branchOnFeatureToggle(ToggledComponent)>
      <withProps(omitProps(BranchOnFeatureToggle))
        @flopflip/flags={Object {}}
      >
        <omitProps(BranchOnFeatureToggle)
          @flopflip/flags={Object {}}
          isFeatureEnabled={false}
        >
          <BranchOnFeatureToggle
            isFeatureEnabled={false}
          >
            <DefaultUntoggledComponent />
          </BranchOnFeatureToggle>
        </omitProps(BranchOnFeatureToggle)>
      </withProps(omitProps(BranchOnFeatureToggle))>
    </branchOnFeatureToggle(ToggledComponent)>
  </ConfigureAdapter>
</ConfigureFlopflip>
`;

exports[`without \`untoggledComponent when feature is disabled when enabling feature should match snapshot 1`] = `
<ConfigureFlopflip
  adapter={
    Object {
      "configure": [Function],
      "getFlag": [Function],
      "getIsReady": [Function],
      "reconfigure": [Function],
      "reset": [Function],
      "waitUntilConfigured": [Function],
    }
  }
  adapterArgs={Object {}}
  defaultFlags={Object {}}
  shouldDeferAdapterConfiguration={false}
>
  <ConfigureAdapter
    adapter={
      Object {
        "configure": [Function],
        "getFlag": [Function],
        "getIsReady": [Function],
        "reconfigure": [Function],
        "reset": [Function],
        "waitUntilConfigured": [Function],
      }
    }
    adapterArgs={
      Object {
        "onFlagsStateChange": [Function],
        "onStatusStateChange": [Function],
      }
    }
    defaultFlags={Object {}}
    render={null}
    shouldDeferAdapterConfiguration={false}
  >
    <branchOnFeatureToggle(ToggledComponent)>
      <withProps(omitProps(BranchOnFeatureToggle))
        @flopflip/flags={
          Object {
            "flag1": true,
          }
        }
      >
        <omitProps(BranchOnFeatureToggle)
          @flopflip/flags={
            Object {
              "flag1": true,
            }
          }
          isFeatureEnabled={true}
        >
          <BranchOnFeatureToggle
            isFeatureEnabled={true}
          >
            <ToggledComponent>
              <div />
            </ToggledComponent>
          </BranchOnFeatureToggle>
        </omitProps(BranchOnFeatureToggle)>
      </withProps(omitProps(BranchOnFeatureToggle))>
    </branchOnFeatureToggle(ToggledComponent)>
  </ConfigureAdapter>
</ConfigureFlopflip>
`;
