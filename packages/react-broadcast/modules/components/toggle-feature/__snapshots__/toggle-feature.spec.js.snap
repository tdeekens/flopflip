// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`when feature is disabled should match snapshot 1`] = `
<ConfigureFlopflip
  adapter={
    Object {
      "configure": [Function],
      "getFlag": [Function],
      "getIsReady": [Function],
      "reconfigure": [Function],
      "reset": [Function],
      "waitUntilConfigured": [Function],
    }
  }
  adapterArgs={Object {}}
  defaultFlags={
    Object {
      "flag1": false,
      "flag2": false,
    }
  }
  shouldDeferAdapterConfiguration={false}
>
  <ConfigureAdapter
    adapter={
      Object {
        "configure": [Function],
        "getFlag": [Function],
        "getIsReady": [Function],
        "reconfigure": [Function],
        "reset": [Function],
        "waitUntilConfigured": [Function],
      }
    }
    adapterArgs={
      Object {
        "onFlagsStateChange": [Function],
        "onStatusStateChange": [Function],
      }
    }
    defaultFlags={
      Object {
        "flag1": false,
        "flag2": false,
      }
    }
    render={null}
    shouldDeferAdapterConfiguration={false}
  >
    <ToggleFeature
      flag="flag1"
    >
      <withProps(ToggleFeature)
        @flopflip/flags={
          Object {
            "flag1": false,
            "flag2": false,
          }
        }
        flag="flag1"
      >
        <ToggleFeature
          @flopflip/flags={
            Object {
              "flag1": false,
              "flag2": false,
            }
          }
          flag="flag1"
          isFeatureEnabled={false}
          render={null}
          toggledComponent={null}
          untoggledComponent={null}
        />
      </withProps(ToggleFeature)>
    </ToggleFeature>
  </ConfigureAdapter>
</ConfigureFlopflip>
`;

exports[`when feature is disabled when enabling feature should match snapshot 1`] = `
<ConfigureFlopflip
  adapter={
    Object {
      "configure": [Function],
      "getFlag": [Function],
      "getIsReady": [Function],
      "reconfigure": [Function],
      "reset": [Function],
      "waitUntilConfigured": [Function],
    }
  }
  adapterArgs={Object {}}
  defaultFlags={
    Object {
      "flag1": false,
      "flag2": false,
    }
  }
  shouldDeferAdapterConfiguration={false}
>
  <ConfigureAdapter
    adapter={
      Object {
        "configure": [Function],
        "getFlag": [Function],
        "getIsReady": [Function],
        "reconfigure": [Function],
        "reset": [Function],
        "waitUntilConfigured": [Function],
      }
    }
    adapterArgs={
      Object {
        "onFlagsStateChange": [Function],
        "onStatusStateChange": [Function],
      }
    }
    defaultFlags={
      Object {
        "flag1": false,
        "flag2": false,
      }
    }
    render={null}
    shouldDeferAdapterConfiguration={false}
  >
    <ToggleFeature
      flag="flag1"
    >
      <withProps(ToggleFeature)
        @flopflip/flags={
          Object {
            "flag1": true,
            "flag2": false,
          }
        }
        flag="flag1"
      >
        <ToggleFeature
          @flopflip/flags={
            Object {
              "flag1": true,
              "flag2": false,
            }
          }
          flag="flag1"
          isFeatureEnabled={true}
          render={null}
          toggledComponent={null}
          untoggledComponent={null}
        >
          <FeatureComponent>
            <div />
          </FeatureComponent>
        </ToggleFeature>
      </withProps(ToggleFeature)>
    </ToggleFeature>
  </ConfigureAdapter>
</ConfigureFlopflip>
`;
