// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`injectFeatureToggles with \`propKey\` should match snapshot 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(ConfigureFlopflip)
    adapter={
      Object {
        "configure": [Function],
        "getFlag": [Function],
        "getIsReady": [Function],
        "reconfigure": [Function],
        "reset": [Function],
        "waitUntilConfigured": [Function],
      }
    }
    adapterArgs={Object {}}
  >
    <ConfigureFlopflip
      adapter={
        Object {
          "configure": [Function],
          "getFlag": [Function],
          "getIsReady": [Function],
          "reconfigure": [Function],
          "reset": [Function],
          "waitUntilConfigured": [Function],
        }
      }
      adapterArgs={Object {}}
      defaultFlags={Object {}}
      handleUpdateFlags={[Function]}
      handleUpdateStatus={[Function]}
      shouldDeferAdapterConfiguration={false}
    >
      <ConfigureAdapter
        adapter={
          Object {
            "configure": [Function],
            "getFlag": [Function],
            "getIsReady": [Function],
            "reconfigure": [Function],
            "reset": [Function],
            "waitUntilConfigured": [Function],
          }
        }
        adapterArgs={
          Object {
            "onFlagsStateChange": [Function],
            "onStatusStateChange": [Function],
          }
        }
        defaultFlags={Object {}}
        render={null}
        shouldDeferAdapterConfiguration={false}
      >
        <injectFeatureToggles(FeatureComponent)>
          <withProps(omitProps(FeatureComponent))
            @flopflip/flags={
              Object {
                "flag1": false,
              }
            }
            dispatch={[Function]}
          >
            <omitProps(FeatureComponent)
              @flopflip/flags={
                Object {
                  "flag1": false,
                }
              }
              dispatch={[Function]}
              fooBar={
                Object {
                  "flag1": false,
                }
              }
            >
              <FeatureComponent
                dispatch={[Function]}
                fooBar={
                  Object {
                    "flag1": false,
                  }
                }
              >
                <FeatureComponent
                  dispatch={[Function]}
                  fooBar={
                    Object {
                      "flag1": false,
                    }
                  }
                >
                  <div />
                </FeatureComponent>
              </FeatureComponent>
            </omitProps(FeatureComponent)>
          </withProps(omitProps(FeatureComponent))>
        </injectFeatureToggles(FeatureComponent)>
      </ConfigureAdapter>
    </ConfigureFlopflip>
  </Connect(ConfigureFlopflip)>
</Provider>
`;

exports[`injectFeatureToggles without \`propKey\` when feature is disabled should match snapshot 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(ConfigureFlopflip)
    adapter={
      Object {
        "configure": [Function],
        "getFlag": [Function],
        "getIsReady": [Function],
        "reconfigure": [Function],
        "reset": [Function],
        "waitUntilConfigured": [Function],
      }
    }
    adapterArgs={Object {}}
  >
    <ConfigureFlopflip
      adapter={
        Object {
          "configure": [Function],
          "getFlag": [Function],
          "getIsReady": [Function],
          "reconfigure": [Function],
          "reset": [Function],
          "waitUntilConfigured": [Function],
        }
      }
      adapterArgs={Object {}}
      defaultFlags={Object {}}
      handleUpdateFlags={[Function]}
      handleUpdateStatus={[Function]}
      shouldDeferAdapterConfiguration={false}
    >
      <ConfigureAdapter
        adapter={
          Object {
            "configure": [Function],
            "getFlag": [Function],
            "getIsReady": [Function],
            "reconfigure": [Function],
            "reset": [Function],
            "waitUntilConfigured": [Function],
          }
        }
        adapterArgs={
          Object {
            "onFlagsStateChange": [Function],
            "onStatusStateChange": [Function],
          }
        }
        defaultFlags={Object {}}
        render={null}
        shouldDeferAdapterConfiguration={false}
      >
        <injectFeatureToggles(FeatureComponent)>
          <withProps(omitProps(FeatureComponent))
            @flopflip/flags={
              Object {
                "flag1": false,
                "flag2": false,
              }
            }
            dispatch={[Function]}
          >
            <omitProps(FeatureComponent)
              @flopflip/flags={
                Object {
                  "flag1": false,
                  "flag2": false,
                }
              }
              dispatch={[Function]}
              featureToggles={
                Object {
                  "flag1": false,
                  "flag2": false,
                }
              }
            >
              <FeatureComponent
                dispatch={[Function]}
                featureToggles={
                  Object {
                    "flag1": false,
                    "flag2": false,
                  }
                }
              >
                <FeatureComponent
                  dispatch={[Function]}
                  featureToggles={
                    Object {
                      "flag1": false,
                      "flag2": false,
                    }
                  }
                >
                  <div />
                </FeatureComponent>
              </FeatureComponent>
            </omitProps(FeatureComponent)>
          </withProps(omitProps(FeatureComponent))>
        </injectFeatureToggles(FeatureComponent)>
      </ConfigureAdapter>
    </ConfigureFlopflip>
  </Connect(ConfigureFlopflip)>
</Provider>
`;

exports[`injectFeatureToggles without \`propKey\` when feature is disabled when enabling feature should match snapshot 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(ConfigureFlopflip)
    adapter={
      Object {
        "configure": [Function],
        "getFlag": [Function],
        "getIsReady": [Function],
        "reconfigure": [Function],
        "reset": [Function],
        "waitUntilConfigured": [Function],
      }
    }
    adapterArgs={Object {}}
  >
    <ConfigureFlopflip
      adapter={
        Object {
          "configure": [Function],
          "getFlag": [Function],
          "getIsReady": [Function],
          "reconfigure": [Function],
          "reset": [Function],
          "waitUntilConfigured": [Function],
        }
      }
      adapterArgs={Object {}}
      defaultFlags={Object {}}
      handleUpdateFlags={[Function]}
      handleUpdateStatus={[Function]}
      shouldDeferAdapterConfiguration={false}
    >
      <ConfigureAdapter
        adapter={
          Object {
            "configure": [Function],
            "getFlag": [Function],
            "getIsReady": [Function],
            "reconfigure": [Function],
            "reset": [Function],
            "waitUntilConfigured": [Function],
          }
        }
        adapterArgs={
          Object {
            "onFlagsStateChange": [Function],
            "onStatusStateChange": [Function],
          }
        }
        defaultFlags={Object {}}
        render={null}
        shouldDeferAdapterConfiguration={false}
      >
        <injectFeatureToggles(FeatureComponent)>
          <withProps(omitProps(FeatureComponent))
            @flopflip/flags={
              Object {
                "flag1": true,
              }
            }
            dispatch={[Function]}
          >
            <omitProps(FeatureComponent)
              @flopflip/flags={
                Object {
                  "flag1": true,
                }
              }
              dispatch={[Function]}
              featureToggles={
                Object {
                  "flag1": true,
                }
              }
            >
              <FeatureComponent
                dispatch={[Function]}
                featureToggles={
                  Object {
                    "flag1": true,
                  }
                }
              >
                <FeatureComponent
                  dispatch={[Function]}
                  featureToggles={
                    Object {
                      "flag1": true,
                    }
                  }
                >
                  <div />
                </FeatureComponent>
              </FeatureComponent>
            </omitProps(FeatureComponent)>
          </withProps(omitProps(FeatureComponent))>
        </injectFeatureToggles(FeatureComponent)>
      </ConfigureAdapter>
    </ConfigureFlopflip>
  </Connect(ConfigureFlopflip)>
</Provider>
`;
