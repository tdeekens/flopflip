// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`with \`untoggledComponent when feature is disabled should match snapshot 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(ConfigureFlopflip)
    adapter={
      Object {
        "configure": [Function],
        "reconfigure": [Function],
      }
    }
    adapterArgs={Object {}}
  >
    <ConfigureFlopflip
      adapter={
        Object {
          "configure": [Function],
          "reconfigure": [Function],
        }
      }
      adapterArgs={Object {}}
      defaultFlags={Object {}}
      handleUpdateFlags={[Function]}
      handleUpdateStatus={[Function]}
      shouldDeferAdapterConfiguration={false}
    >
      <ConfigureAdapter
        adapter={
          Object {
            "configure": [Function],
            "reconfigure": [Function],
          }
        }
        adapterArgs={
          Object {
            "onFlagsStateChange": [Function],
            "onStatusStateChange": [Function],
          }
        }
        defaultFlags={Object {}}
        shouldDeferAdapterConfiguration={false}
      >
        <Container>
          <branchOnFeatureToggle(ToggledComponent)>
            <withProps(omitProps(branch(ToggledComponent)))
              @flopflip/flags={
                Object {
                  "flag1": false,
                }
              }
              dispatch={[Function]}
            >
              <omitProps(branch(ToggledComponent))
                @flopflip/flags={
                  Object {
                    "flag1": false,
                  }
                }
                dispatch={[Function]}
                isFeatureEnabled={false}
              >
                <branch(ToggledComponent)
                  dispatch={[Function]}
                  isFeatureEnabled={false}
                >
                  <renderComponent(UntoggledComponent)
                    dispatch={[Function]}
                    isFeatureEnabled={false}
                  >
                    <UntoggledComponent
                      dispatch={[Function]}
                      isFeatureEnabled={false}
                    >
                      <div />
                    </UntoggledComponent>
                  </renderComponent(UntoggledComponent)>
                </branch(ToggledComponent)>
              </omitProps(branch(ToggledComponent))>
            </withProps(omitProps(branch(ToggledComponent)))>
          </branchOnFeatureToggle(ToggledComponent)>
        </Container>
      </ConfigureAdapter>
    </ConfigureFlopflip>
  </Connect(ConfigureFlopflip)>
</Provider>
`;

exports[`with \`untoggledComponent when feature is disabled when enabling feature should match snapshot 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(ConfigureFlopflip)
    adapter={
      Object {
        "configure": [Function],
        "reconfigure": [Function],
      }
    }
    adapterArgs={Object {}}
  >
    <ConfigureFlopflip
      adapter={
        Object {
          "configure": [Function],
          "reconfigure": [Function],
        }
      }
      adapterArgs={Object {}}
      defaultFlags={Object {}}
      handleUpdateFlags={[Function]}
      handleUpdateStatus={[Function]}
      shouldDeferAdapterConfiguration={false}
    >
      <ConfigureAdapter
        adapter={
          Object {
            "configure": [Function],
            "reconfigure": [Function],
          }
        }
        adapterArgs={
          Object {
            "onFlagsStateChange": [Function],
            "onStatusStateChange": [Function],
          }
        }
        defaultFlags={Object {}}
        shouldDeferAdapterConfiguration={false}
      >
        <Container>
          <branchOnFeatureToggle(ToggledComponent)>
            <withProps(omitProps(branch(ToggledComponent)))
              @flopflip/flags={
                Object {
                  "flag1": true,
                }
              }
              dispatch={[Function]}
            >
              <omitProps(branch(ToggledComponent))
                @flopflip/flags={
                  Object {
                    "flag1": true,
                  }
                }
                dispatch={[Function]}
                isFeatureEnabled={true}
              >
                <branch(ToggledComponent)
                  dispatch={[Function]}
                  isFeatureEnabled={true}
                >
                  <ToggledComponent
                    dispatch={[Function]}
                    isFeatureEnabled={true}
                  >
                    <div />
                  </ToggledComponent>
                </branch(ToggledComponent)>
              </omitProps(branch(ToggledComponent))>
            </withProps(omitProps(branch(ToggledComponent)))>
          </branchOnFeatureToggle(ToggledComponent)>
        </Container>
      </ConfigureAdapter>
    </ConfigureFlopflip>
  </Connect(ConfigureFlopflip)>
</Provider>
`;

exports[`without \`untoggledComponent when feature is disabled should match snapshot 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(ConfigureFlopflip)
    adapter={
      Object {
        "configure": [Function],
        "reconfigure": [Function],
      }
    }
    adapterArgs={Object {}}
  >
    <ConfigureFlopflip
      adapter={
        Object {
          "configure": [Function],
          "reconfigure": [Function],
        }
      }
      adapterArgs={Object {}}
      defaultFlags={Object {}}
      handleUpdateFlags={[Function]}
      handleUpdateStatus={[Function]}
      shouldDeferAdapterConfiguration={false}
    >
      <ConfigureAdapter
        adapter={
          Object {
            "configure": [Function],
            "reconfigure": [Function],
          }
        }
        adapterArgs={
          Object {
            "onFlagsStateChange": [Function],
            "onStatusStateChange": [Function],
          }
        }
        defaultFlags={Object {}}
        shouldDeferAdapterConfiguration={false}
      >
        <Container>
          <branchOnFeatureToggle(ToggledComponent)>
            <withProps(omitProps(branch(ToggledComponent)))
              @flopflip/flags={
                Object {
                  "flag1": false,
                }
              }
              dispatch={[Function]}
            >
              <omitProps(branch(ToggledComponent))
                @flopflip/flags={
                  Object {
                    "flag1": false,
                  }
                }
                dispatch={[Function]}
                isFeatureEnabled={false}
              >
                <branch(ToggledComponent)
                  dispatch={[Function]}
                  isFeatureEnabled={false}
                >
                  <Nothing
                    dispatch={[Function]}
                    isFeatureEnabled={false}
                  />
                </branch(ToggledComponent)>
              </omitProps(branch(ToggledComponent))>
            </withProps(omitProps(branch(ToggledComponent)))>
          </branchOnFeatureToggle(ToggledComponent)>
        </Container>
      </ConfigureAdapter>
    </ConfigureFlopflip>
  </Connect(ConfigureFlopflip)>
</Provider>
`;

exports[`without \`untoggledComponent when feature is disabled when enabling feature should match snapshot 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <Connect(ConfigureFlopflip)
    adapter={
      Object {
        "configure": [Function],
        "reconfigure": [Function],
      }
    }
    adapterArgs={Object {}}
  >
    <ConfigureFlopflip
      adapter={
        Object {
          "configure": [Function],
          "reconfigure": [Function],
        }
      }
      adapterArgs={Object {}}
      defaultFlags={Object {}}
      handleUpdateFlags={[Function]}
      handleUpdateStatus={[Function]}
      shouldDeferAdapterConfiguration={false}
    >
      <ConfigureAdapter
        adapter={
          Object {
            "configure": [Function],
            "reconfigure": [Function],
          }
        }
        adapterArgs={
          Object {
            "onFlagsStateChange": [Function],
            "onStatusStateChange": [Function],
          }
        }
        defaultFlags={Object {}}
        shouldDeferAdapterConfiguration={false}
      >
        <Container>
          <branchOnFeatureToggle(ToggledComponent)>
            <withProps(omitProps(branch(ToggledComponent)))
              @flopflip/flags={
                Object {
                  "flag1": true,
                }
              }
              dispatch={[Function]}
            >
              <omitProps(branch(ToggledComponent))
                @flopflip/flags={
                  Object {
                    "flag1": true,
                  }
                }
                dispatch={[Function]}
                isFeatureEnabled={true}
              >
                <branch(ToggledComponent)
                  dispatch={[Function]}
                  isFeatureEnabled={true}
                >
                  <ToggledComponent
                    dispatch={[Function]}
                    isFeatureEnabled={true}
                  >
                    <div />
                  </ToggledComponent>
                </branch(ToggledComponent)>
              </omitProps(branch(ToggledComponent))>
            </withProps(omitProps(branch(ToggledComponent)))>
          </branchOnFeatureToggle(ToggledComponent)>
        </Container>
      </ConfigureAdapter>
    </ConfigureFlopflip>
  </Connect(ConfigureFlopflip)>
</Provider>
`;
